// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	ocp "github.com/bankdata/styra-controller/pkg/ocp"
	mock "github.com/stretchr/testify/mock"
)

// ClientInterface is an autogenerated mock type for the ClientInterface type
type ClientInterface struct {
	mock.Mock
}

// GetSource provides a mock function with given fields: ctx, id
func (_m *ClientInterface) GetSource(ctx context.Context, id string) (*ocp.GetSourceResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSource")
	}

	var r0 *ocp.GetSourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ocp.GetSourceResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ocp.GetSourceResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ocp.GetSourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBundle provides a mock function with given fields: ctx, bundle
func (_m *ClientInterface) PutBundle(ctx context.Context, bundle *ocp.PutBundleRequest) error {
	ret := _m.Called(ctx, bundle)

	if len(ret) == 0 {
		panic("no return value specified for PutBundle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ocp.PutBundleRequest) error); ok {
		r0 = rf(ctx, bundle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutSource provides a mock function with given fields: ctx, id, request
func (_m *ClientInterface) PutSource(ctx context.Context, id string, request *ocp.PutSourceRequest) (*ocp.PutSourceResponse, error) {
	ret := _m.Called(ctx, id, request)

	if len(ret) == 0 {
		panic("no return value specified for PutSource")
	}

	var r0 *ocp.PutSourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *ocp.PutSourceRequest) (*ocp.PutSourceResponse, error)); ok {
		return rf(ctx, id, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *ocp.PutSourceRequest) *ocp.PutSourceResponse); ok {
		r0 = rf(ctx, id, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ocp.PutSourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *ocp.PutSourceRequest) error); ok {
		r1 = rf(ctx, id, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientInterface creates a new instance of ClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientInterface {
	mock := &ClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
