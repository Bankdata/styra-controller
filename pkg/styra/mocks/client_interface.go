// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	styra "github.com/bankdata/styra-controller/pkg/styra"
	mock "github.com/stretchr/testify/mock"
)

// ClientInterface is an autogenerated mock type for the ClientInterface type
type ClientInterface struct {
	mock.Mock
}

// CreateInvitation provides a mock function with given fields: ctx, email, name
func (_m *ClientInterface) CreateInvitation(ctx context.Context, email bool, name string) (*styra.CreateInvitationResponse, error) {
	ret := _m.Called(ctx, email, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvitation")
	}

	var r0 *styra.CreateInvitationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool, string) (*styra.CreateInvitationResponse, error)); ok {
		return rf(ctx, email, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool, string) *styra.CreateInvitationResponse); ok {
		r0 = rf(ctx, email, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*styra.CreateInvitationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool, string) error); ok {
		r1 = rf(ctx, email, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRoleBinding provides a mock function with given fields: ctx, request
func (_m *ClientInterface) CreateRoleBinding(ctx context.Context, request *styra.CreateRoleBindingRequest) (*styra.CreateRoleBindingResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoleBinding")
	}

	var r0 *styra.CreateRoleBindingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *styra.CreateRoleBindingRequest) (*styra.CreateRoleBindingResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *styra.CreateRoleBindingRequest) *styra.CreateRoleBindingResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*styra.CreateRoleBindingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *styra.CreateRoleBindingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSystem provides a mock function with given fields: ctx, request
func (_m *ClientInterface) CreateSystem(ctx context.Context, request *styra.CreateSystemRequest) (*styra.CreateSystemResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateSystem")
	}

	var r0 *styra.CreateSystemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *styra.CreateSystemRequest) (*styra.CreateSystemResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *styra.CreateSystemRequest) *styra.CreateSystemResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*styra.CreateSystemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *styra.CreateSystemRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUpdateSecret provides a mock function with given fields: ctx, secretID, request
func (_m *ClientInterface) CreateUpdateSecret(ctx context.Context, secretID string, request *styra.CreateUpdateSecretsRequest) (*styra.CreateUpdateSecretResponse, error) {
	ret := _m.Called(ctx, secretID, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateUpdateSecret")
	}

	var r0 *styra.CreateUpdateSecretResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *styra.CreateUpdateSecretsRequest) (*styra.CreateUpdateSecretResponse, error)); ok {
		return rf(ctx, secretID, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *styra.CreateUpdateSecretsRequest) *styra.CreateUpdateSecretResponse); ok {
		r0 = rf(ctx, secretID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*styra.CreateUpdateSecretResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *styra.CreateUpdateSecretsRequest) error); ok {
		r1 = rf(ctx, secretID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDatasource provides a mock function with given fields: ctx, id
func (_m *ClientInterface) DeleteDatasource(ctx context.Context, id string) (*styra.DeleteDatasourceResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatasource")
	}

	var r0 *styra.DeleteDatasourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*styra.DeleteDatasourceResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *styra.DeleteDatasourceResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*styra.DeleteDatasourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePolicy provides a mock function with given fields: ctx, policyName
func (_m *ClientInterface) DeletePolicy(ctx context.Context, policyName string) (*styra.DeletePolicyResponse, error) {
	ret := _m.Called(ctx, policyName)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicy")
	}

	var r0 *styra.DeletePolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*styra.DeletePolicyResponse, error)); ok {
		return rf(ctx, policyName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *styra.DeletePolicyResponse); ok {
		r0 = rf(ctx, policyName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*styra.DeletePolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, policyName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRoleBindingV2 provides a mock function with given fields: ctx, id
func (_m *ClientInterface) DeleteRoleBindingV2(ctx context.Context, id string) (*styra.DeleteRoleBindingV2Response, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoleBindingV2")
	}

	var r0 *styra.DeleteRoleBindingV2Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*styra.DeleteRoleBindingV2Response, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *styra.DeleteRoleBindingV2Response); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*styra.DeleteRoleBindingV2Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSystem provides a mock function with given fields: ctx, id
func (_m *ClientInterface) DeleteSystem(ctx context.Context, id string) (*styra.DeleteSystemResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSystem")
	}

	var r0 *styra.DeleteSystemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*styra.DeleteSystemResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *styra.DeleteSystemResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*styra.DeleteSystemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatasource provides a mock function with given fields: ctx, id
func (_m *ClientInterface) GetDatasource(ctx context.Context, id string) (*styra.GetDatasourceResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasource")
	}

	var r0 *styra.GetDatasourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*styra.GetDatasourceResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *styra.GetDatasourceResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*styra.GetDatasourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLibrary provides a mock function with given fields: ctx, id
func (_m *ClientInterface) GetLibrary(ctx context.Context, id string) (*styra.GetLibraryResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetLibrary")
	}

	var r0 *styra.GetLibraryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*styra.GetLibraryResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *styra.GetLibraryResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*styra.GetLibraryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOPAConfig provides a mock function with given fields: ctx, systemID
func (_m *ClientInterface) GetOPAConfig(ctx context.Context, systemID string) (styra.OPAConfig, error) {
	ret := _m.Called(ctx, systemID)

	if len(ret) == 0 {
		panic("no return value specified for GetOPAConfig")
	}

	var r0 styra.OPAConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (styra.OPAConfig, error)); ok {
		return rf(ctx, systemID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) styra.OPAConfig); ok {
		r0 = rf(ctx, systemID)
	} else {
		r0 = ret.Get(0).(styra.OPAConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, systemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystem provides a mock function with given fields: ctx, id
func (_m *ClientInterface) GetSystem(ctx context.Context, id string) (*styra.GetSystemResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSystem")
	}

	var r0 *styra.GetSystemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*styra.GetSystemResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *styra.GetSystemResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*styra.GetSystemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemByName provides a mock function with given fields: ctx, name
func (_m *ClientInterface) GetSystemByName(ctx context.Context, name string) (*styra.GetSystemResponse, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemByName")
	}

	var r0 *styra.GetSystemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*styra.GetSystemResponse, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *styra.GetSystemResponse); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*styra.GetSystemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, name
func (_m *ClientInterface) GetUser(ctx context.Context, name string) (*styra.GetUserResponse, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *styra.GetUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*styra.GetUserResponse, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *styra.GetUserResponse); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*styra.GetUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx
func (_m *ClientInterface) GetUsers(ctx context.Context) (*styra.GetUsersResponse, bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 *styra.GetUsersResponse
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (*styra.GetUsersResponse, bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *styra.GetUsersResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*styra.GetUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// InvalidateCache provides a mock function with given fields:
func (_m *ClientInterface) InvalidateCache() {
	_m.Called()
}

// ListRoleBindingsV2 provides a mock function with given fields: ctx, params
func (_m *ClientInterface) ListRoleBindingsV2(ctx context.Context, params *styra.ListRoleBindingsV2Params) (*styra.ListRoleBindingsV2Response, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListRoleBindingsV2")
	}

	var r0 *styra.ListRoleBindingsV2Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *styra.ListRoleBindingsV2Params) (*styra.ListRoleBindingsV2Response, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *styra.ListRoleBindingsV2Params) *styra.ListRoleBindingsV2Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*styra.ListRoleBindingsV2Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *styra.ListRoleBindingsV2Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoleBindingSubjects provides a mock function with given fields: ctx, id, request
func (_m *ClientInterface) UpdateRoleBindingSubjects(ctx context.Context, id string, request *styra.UpdateRoleBindingSubjectsRequest) (*styra.UpdateRoleBindingSubjectsResponse, error) {
	ret := _m.Called(ctx, id, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoleBindingSubjects")
	}

	var r0 *styra.UpdateRoleBindingSubjectsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *styra.UpdateRoleBindingSubjectsRequest) (*styra.UpdateRoleBindingSubjectsResponse, error)); ok {
		return rf(ctx, id, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *styra.UpdateRoleBindingSubjectsRequest) *styra.UpdateRoleBindingSubjectsResponse); ok {
		r0 = rf(ctx, id, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*styra.UpdateRoleBindingSubjectsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *styra.UpdateRoleBindingSubjectsRequest) error); ok {
		r1 = rf(ctx, id, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSystem provides a mock function with given fields: ctx, id, request
func (_m *ClientInterface) UpdateSystem(ctx context.Context, id string, request *styra.UpdateSystemRequest) (*styra.UpdateSystemResponse, error) {
	ret := _m.Called(ctx, id, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSystem")
	}

	var r0 *styra.UpdateSystemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *styra.UpdateSystemRequest) (*styra.UpdateSystemResponse, error)); ok {
		return rf(ctx, id, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *styra.UpdateSystemRequest) *styra.UpdateSystemResponse); ok {
		r0 = rf(ctx, id, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*styra.UpdateSystemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *styra.UpdateSystemRequest) error); ok {
		r1 = rf(ctx, id, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspace provides a mock function with given fields: ctx, request
func (_m *ClientInterface) UpdateWorkspace(ctx context.Context, request *styra.UpdateWorkspaceRequest) (*styra.UpdateWorkspaceResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkspace")
	}

	var r0 *styra.UpdateWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *styra.UpdateWorkspaceRequest) (*styra.UpdateWorkspaceResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *styra.UpdateWorkspaceRequest) *styra.UpdateWorkspaceResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*styra.UpdateWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *styra.UpdateWorkspaceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertDatasource provides a mock function with given fields: ctx, id, request
func (_m *ClientInterface) UpsertDatasource(ctx context.Context, id string, request *styra.UpsertDatasourceRequest) (*styra.UpsertDatasourceResponse, error) {
	ret := _m.Called(ctx, id, request)

	if len(ret) == 0 {
		panic("no return value specified for UpsertDatasource")
	}

	var r0 *styra.UpsertDatasourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *styra.UpsertDatasourceRequest) (*styra.UpsertDatasourceResponse, error)); ok {
		return rf(ctx, id, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *styra.UpsertDatasourceRequest) *styra.UpsertDatasourceResponse); ok {
		r0 = rf(ctx, id, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*styra.UpsertDatasourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *styra.UpsertDatasourceRequest) error); ok {
		r1 = rf(ctx, id, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertLibrary provides a mock function with given fields: ctx, id, request
func (_m *ClientInterface) UpsertLibrary(ctx context.Context, id string, request *styra.UpsertLibraryRequest) (*styra.UpsertLibraryResponse, error) {
	ret := _m.Called(ctx, id, request)

	if len(ret) == 0 {
		panic("no return value specified for UpsertLibrary")
	}

	var r0 *styra.UpsertLibraryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *styra.UpsertLibraryRequest) (*styra.UpsertLibraryResponse, error)); ok {
		return rf(ctx, id, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *styra.UpsertLibraryRequest) *styra.UpsertLibraryResponse); ok {
		r0 = rf(ctx, id, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*styra.UpsertLibraryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *styra.UpsertLibraryRequest) error); ok {
		r1 = rf(ctx, id, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyGitConfiguration provides a mock function with given fields: ctx, request
func (_m *ClientInterface) VerifyGitConfiguration(ctx context.Context, request *styra.VerfiyGitConfigRequest) (*styra.VerfiyGitConfigResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for VerifyGitConfiguration")
	}

	var r0 *styra.VerfiyGitConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *styra.VerfiyGitConfigRequest) (*styra.VerfiyGitConfigResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *styra.VerfiyGitConfigRequest) *styra.VerfiyGitConfigResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*styra.VerfiyGitConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *styra.VerfiyGitConfigRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientInterface creates a new instance of ClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientInterface {
	mock := &ClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
